generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  pgType    PgType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resolvedEnquiries Enquiry[] // Enquiries resolved by this admin
}

model Enquiry {
  id         String        @id @default(cuid())
  name       String
  phone      String
  message    String        @db.Text
  status     EnquiryStatus @default(NOT_RESOLVED)
  resolvedBy String? // Admin ID who resolved the enquiry
  resolvedAt DateTime? // When the enquiry was resolved
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  resolver Admin? @relation(fields: [resolvedBy], references: [id])

  @@index([status])
  @@index([createdAt])
}

model PG {
  id        String    @id @default(cuid())
  name      String
  type      PgType
  location  String
  rooms     Room[]
  members   Member[]
  payments  Payment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Room {
  id        String   @id @default(cuid())
  roomNo    String
  rent      Float
  capacity  Int
  members   Member[]
  PG        PG?      @relation(fields: [pGId], references: [id])
  pGId      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roomNo, pGId])
}

model Member {
  id            String    @id @default(cuid())
  memberId      String    @unique // auto generated unique member ID
  name          String
  age           Int
  gender        Gender
  location      String
  email         String    @unique
  phone         String    @unique
  work          String
  photoUrl      String?
  aadharUrl     String?
  rentType      RentType
  advanceAmount Float
  pgId          String
  pg            PG        @relation(fields: [pgId], references: [id])
  roomId        String?
  room          Room?     @relation(fields: [roomId], references: [id])
  dateOfJoining DateTime  @default(now())
  payment       Payment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model RegisteredMember {
  id         String   @id @default(cuid())
  name       String
  age        Int
  gender     Gender
  location   String
  pgLocation String
  email      String   @unique
  phone      String   @unique
  work       String
  photoUrl   String?
  aadharUrl  String?
  rentType   RentType
  pgType     PgType
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payment {
  id       String @id @default(cuid())
  memberId String
  member   Member @relation(fields: [memberId], references: [id])

  pgId String
  pg   PG     @relation(fields: [pgId], references: [id])

  month                     Int
  year                      Int
  amount                    Float
  dueDate                   DateTime // When payment is due (1 month from joining date)
  overdueDate               DateTime // When payment becomes overdue (dueDate + 5 days)
  rentBillScreenshot        String? // Optional initially
  electricityBillScreenshot String? // Optional initially
  paidDate                  DateTime?

  attemptNumber  Int            @default(1)
  paymentStatus  PaymentStatus  @default(PENDING)
  approvalStatus ApprovalStatus @default(PENDING)
  approvedBy     String? // Admin ID
  approvedAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([memberId, month, year, attemptNumber])
  @@index([pgId, month, year])
  @@index([memberId, month, year])
}

model DashboardStats {
  id                    String   @id @default(cuid())
  pgType                PgType 
  month                 Int
  year                  Int
  totalMembers          Int
  rentCollection        Float
  newMembers            Int
  paymentApprovals      Int
  registrationApprovals Int
  totalMemberTrend      Int
  rentCollectionTrend   Int
  newMemberTrend        Int
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@unique([pgType, month, year])
}

model RegistrationStats {
  id                     String   @id @default(cuid())
  month                  Int
  year                   Int
  pgType                 PgType
  totalPendingRequests   Int
  longTermRequests       Int
  shortTermRequests      Int
  thisMonthRegistrations Int
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@unique([pgType, month, year])
}

model PaymentStats {
  id                           String   @id @default(cuid())
  month                        Int
  year                         Int
  pgType                       PgType // Track stats by PG type instead of individual PG
  totalPendingPayments         Int
  totalAmountPending           Int
  totalOverduePayments         Int
  thisMonthPendingPaymentCount Int
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  @@unique([pgType, month, year])
}

enum Gender {
  MALE
  FEMALE
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  PAID
  APPROVED
  REJECTED
  OVERDUE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RentType {
  LONG_TERM
  SHORT_TERM
}

enum PgType {
  WOMENS
  MENS
}

enum EnquiryStatus {
  NOT_RESOLVED
  RESOLVED
}
